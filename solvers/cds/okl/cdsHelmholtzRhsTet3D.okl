/*

The MIT License (MIT)

Copyright (c) 2017 Tim Warburton, Noel Chalmers, Jesse Chan, Ali Karakus

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*/

// 
@kernel void cdsHelmholtzRhsEXTBDFTet3D(const dlong Nelements,
                                        @restrict const  dfloat *  vgeo,
                                        @restrict const  dfloat *  MM,
                                        const dfloat idt,
                                        const dfloat ialf,
                                        @restrict const  dfloat *  extbdfA,
                                        @restrict const  dfloat *  extbdfB,
                                        @restrict const  dfloat *  extbdfC,
                                        const dlong sOffset,
                                        @restrict const  dfloat *  S,
                                        @restrict const  dfloat *  NS,
                                        @restrict const  dfloat *  FS,
                                              @restrict dfloat *  rhsS){
  for(dlong eo=0;eo<Nelements;eo+=p_NblockV;@outer(0)){

    @shared dfloat s_rhsS[p_NblockV][p_Np];

    for(int es=0;es<p_NblockV;++es;@inner(1)){// for all elements in block
      for(int n=0;n<p_Np;++n;@inner(0)){     // for all nodes in this element
        const dlong e = eo+es; // element in block
        if(e<Nelements){
          const dlong id = n + p_Np*e;
          const dfloat J = vgeo[e*p_Nvgeo + p_JID];

          if (p_SUBCYCLING) {
            //NU holds \hat{U} after subcycling
            const dfloat NSm = NS[id+0*sOffset];
            s_rhsS[es][n] = J*ialf*idt*NSm;
            for (int s=0;s<p_Nstages;s++) {
              // double check sign!!!!!
              rhsSn += J*ialf*extbdfA[s]*FS[id+0*sOffset+s*p_NSfields*sOffset];
            }
          } else {
            s_rhsS[es][n] = 0.f;

            for (int s=0;s<p_Nstages;s++) {
              //S and NS
              const dfloat Sm  = S[id+0*sOffset+s*p_NSfields*sOffset];
              const dfloat NSm = NS[id+0*sOffset+s*p_NSfields*sOffset];
              const dfloat FSm = FS[id+0*sOffset+s*p_NSfields*sOffset];
              s_rhsS[es][n]    += J*ialf*(idt*extbdfB[s]*Sm - extbdfA[s]*(NSm - FSm));
            }
          }
        }
      }
    }

    // make sure all node data is loaded into @shared
    @barrier("local");

    for(int es=0;es<p_NblockV;++es;@inner(1)){// for all elements in block
      for(int n=0;n<p_Np;++n;@inner(0)){     // for all nodes in this element
        const dlong e = eo+es; // element in block
        if(e<Nelements){
          // Multiplay with Mass Matrix
          const dlong id = e*p_Np+n;

          dfloat rhss = 0.f; 
          #pragma unroll p_Np
            for(int i=0;i<p_Np;++i){
              const dfloat M = MM[n+i*p_Np];
              rhss  += M*s_rhsS[es][i];
            }
          // Update
          rhsS[id] = rhss;
        }
      }
    }
  }
}