/*

The MIT License (MIT)

Copyright (c) 2017 Tim Warburton, Noel Chalmers, Jesse Chan, Ali Karakus

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*/


// compute div(NU)  = div(uxu) in collocation way (weak form)
@kernel void cdsAdvectionVolumeQuad2D(const dlong Nelements,
                                      @restrict const  dfloat *  vgeo,
                                      @restrict const  dfloat *  D,
                                      const dlong voffset,
                                      const dlong soffset,
                                      @restrict const  dfloat *  U,
                                      @restrict const  dfloat *  S,
                                      @restrict dfloat *  NS){

  for(dlong eo=0;eo<Nelements;eo+=p_NblockV;@outer(0)){  // for all elements

    @shared dfloat s_F11[p_NblockV][p_Nq][p_Nq];
    @shared dfloat s_F12[p_NblockV][p_Nq][p_Nq];
    @shared dfloat s_D[p_Nq][p_Nq];

    for(int es=0;es<p_NblockV;++es;@inner(2)){   
      for(int j=0;j<p_Nq;++j;@inner(1)){ 
        for(int i=0;i<p_Nq;++i;@inner(0)){    
          const dlong e = eo+es; // element in block
          if(e<Nelements){ 
            const dlong gid = e*p_Np*p_Nvgeo+ j*p_Nq +i;
            const dfloat drdx = vgeo[gid + p_RXID*p_Np];
            const dfloat drdy = vgeo[gid + p_RYID*p_Np];
            const dfloat dsdx = vgeo[gid + p_SXID*p_Np];
            const dfloat dsdy = vgeo[gid + p_SYID*p_Np];
            const dfloat JW   = vgeo[gid + p_JWID*p_Np];

            const dlong id = e*p_Np + j*p_Nq+i;

            const dfloat Un = U[id+0*voffset];
            const dfloat Vn = U[id+1*voffset];
            const dfloat Sn = S[id+0*soffset];

            const dfloat cUn = JW*(drdx*Un+drdy*Vn);
            const dfloat cVn = JW*(dsdx*Un+dsdy*Vn);

            s_F11[es][j][i] = cUn*Sn;
            s_F12[es][j][i] = cVn*Sn;

            if (es==0)
              s_D[j][i] = D[j*p_Nq+i];
          }
        }
      }
    }

    // Make sure all node data is loaded into @shared
    @barrier("local");

    for(int es=0;es<p_NblockV;++es;@inner(2)){ 
      for(int j=0;j<p_Nq;++j;@inner(1)){ 
        for(int i=0;i<p_Nq;++i;@inner(0)){  
          const dlong e = eo+es; 
          if(e<Nelements){ 
            const dlong gid = e*p_Np*p_Nvgeo+ j*p_Nq +i;
            const dfloat invJW = vgeo[gid + p_IJWID*p_Np];
            dfloat ns = 0.f; 
            
#pragma unroll p_Nq
	    for(int n=0;n<p_Nq;++n){
	      const dfloat Dr = s_D[n][i];
	      const dfloat Ds = s_D[n][j];

	      ns += Dr*s_F11[es][j][n]
		         +Ds*s_F12[es][n][i];
	    }

            const dlong id = e*p_Np + j*p_Nq + i;
            NS[id+0*soffset] = -invJW*ns;
          }
        }
      }
    }
  }  
}



void surfaceTerms(dlong e, int es, dlong voffset, dlong soffset, int sk, int face, int i, int j, dfloat time,
      const dfloat *x,
      const dfloat *y, 
      const dfloat *sgeo,
      const dlong *vmapM,
      const dlong *vmapP,
      const dlong *EToB,
      const dfloat *U,
      const dfloat *S,
      @shared dfloat s_fluxNS[p_NblockS][p_Nq][p_Nq]){
  
  const dfloat sJ = sgeo[sk*p_Nsgeo+p_SJID];                            
  const dfloat invWJ = sgeo[sk*p_Nsgeo+p_WIJID];                        

  struct bcData bc; 
  bc.idM = vmapM[sk];                                         
  bc.idP = vmapP[sk];   

  bc.voffset = voffset;
  bc.soffset = soffset;

  bc.time = time; 
  bc.nx = sgeo[sk*p_Nsgeo+p_NXID];                            
  bc.ny = sgeo[sk*p_Nsgeo+p_NYID];                            
  // fill struct
  bc.uM = U[bc.idM+0*bc.voffset]; 
  bc.vM = U[bc.idM+1*bc.voffset];             
  bc.uP = U[bc.idP+0*bc.voffset];
  bc.vP = U[bc.idP+1*bc.voffset];             
  bc.sM = S[bc.idM+0*bc.soffset];             
  bc.sP = S[bc.idP+0*bc.soffset];
  // bc.wrk = (dfloat *) W;

  bc.id = EToB[face+p_Nfaces*e];                                       
  if(bc.id>0) {                                                            
     cdsDirichletConditions2D(&bc);
  }                                                                     
  
  const dfloat unM   = fabs(bc.nx*bc.uM + bc.ny*bc.vM);                         
  const dfloat unP   = fabs(bc.nx*bc.uP + bc.ny*bc.vP);                         
  const dfloat unMax = (unM > unP) ? unM : unP;                         
                                                                        
  const dfloat sc = invWJ * sJ;                                         
  s_fluxNS[es][j][i] += sc*(.5f*(bc.nx*(bc.sP*bc.uP + bc.sM*bc.uM)                     
                               + bc.ny*(bc.sP*bc.vP + bc.sM*bc.vM)  + unMax*(bc.sM-bc.sP) ));
}

@kernel void cdsAdvectionSurfaceQuad2D(const dlong Nelements,
                                      @restrict const  dfloat *  sgeo,
                                      @restrict const  dfloat *  LIFTT,
                                      @restrict const  dlong  *  vmapM,
                                      @restrict const  dlong  *  vmapP,
                                      @restrict const  int    *  EToB,
                                      const dfloat time,
                                      @restrict const  dfloat *  x,
                                      @restrict const  dfloat *  y,
                                      @restrict const  dfloat *  z,
                                      const dlong voffset,
                                      const dlong soffset,
                                      @restrict const  dfloat *  U,
                                      @restrict const  dfloat *  S,
                                            @restrict dfloat *  NS){
  // for all elements
  for(dlong eo=0;eo<Nelements;eo+=p_NblockS;@outer(0)){
    // @shared storage for flux terms
    @shared dfloat s_fluxNS[p_NblockS][p_Nq][p_Nq];

    for(int es=0;es<p_NblockS;++es;@inner(1)){
      for(int i=0;i<p_Nq;++i;@inner(0)){
#pragma unroll p_Nq
        for(int j=0;j<p_Nq;++j){
          s_fluxNS[es][j][i] = 0.f;
        }
      }
    }

    @barrier("local");

    // for all face nodes of all elements
    // face 0 & 2
    for(int es=0;es<p_NblockS;++es;@inner(1)){
      for(int i=0;i<p_Nq;++i;@inner(0)){
        const dlong e = eo + es;
        if(e<Nelements){
    const dlong sk0 = e*p_Nfp*p_Nfaces + 0*p_Nfp + i;
    const dlong sk2 = e*p_Nfp*p_Nfaces + 2*p_Nfp + i;
    
    //          surfaceTerms(sk0,0,i,0     );
    surfaceTerms(e, es, voffset, soffset, sk0, 0, i, 0,
                 time, x, y, sgeo, vmapM, vmapP, EToB, U, S, s_fluxNS);

          // surfaceTerms(sk2,2,i,p_Nq-1);
    surfaceTerms(e, es, voffset, soffset, sk2, 2, i, p_Nq-1,
                time, x, y, sgeo, vmapM, vmapP, EToB, U, S, s_fluxNS);
        }
      }
    }

    @barrier("local");

    // face 1 & 3
    for(int es=0;es<p_NblockS;++es;@inner(1)){
      for(int j=0;j<p_Nq;++j;@inner(0)){
        const dlong e = eo + es;
        if(e<Nelements){
          const dlong sk1 = e*p_Nfp*p_Nfaces + 1*p_Nfp + j;
          const dlong sk3 = e*p_Nfp*p_Nfaces + 3*p_Nfp + j;

    //          surfaceTerms(sk1,1,p_Nq-1,j);
    surfaceTerms(e, es, voffset, soffset, sk1, 1, p_Nq-1, j,
           time, x, y, sgeo, vmapM, vmapP, EToB, U, S, s_fluxNS);

    //          surfaceTerms(sk3,3,0     ,j);
    surfaceTerms(e, es, voffset, soffset, sk3, 3, 0, j,
            time, x, y, sgeo, vmapM, vmapP, EToB, U, S, s_fluxNS);
        }
      }
    }

    @barrier("local");

    // for each node in the element
    for(int es=0;es<p_NblockS;++es;@inner(1)){
      for(int i=0;i<p_Nq;++i;@inner(0)){
        const dlong e = eo + es;
        if(e<Nelements){
#pragma unroll p_Nq
          for(int j=0;j<p_Nq;++j){
            const dlong id = e*p_Np + j*p_Nq + i;

            NS[id+0*soffset] += s_fluxNS[es][j][i];
          }
        }
      }
    }
  }
}


/* ------------------Quadrature @kernels ----------------------------------*/

// compute div(NU)  = div(uxu) using quadrature (weak form)
@kernel void cdsAdvectionCubatureVolumeQuad2D(const dlong Nelements,
                @restrict const  dfloat *  vgeo,
                @restrict const  dfloat *  cubvgeo,
                @restrict const  dfloat *  cubDWT,
                @restrict const  dfloat *  cubInterpT,
                @restrict const  dfloat *  cubProjectT,
                const dlong voffset,
                const dlong soffset,
                @restrict const  dfloat *  U,
                @restrict const  dfloat *  S,
                @restrict dfloat *  NS){

  for(dlong eo=0;eo<Nelements;eo+=p_NblockV;@outer(0)){  // for all elements

    @shared dfloat s_F11[p_NblockV][p_cubNq][p_cubNq];
    @shared dfloat s_F12[p_NblockV][p_cubNq][p_cubNq];
    @shared dfloat s_F13[p_NblockV][p_cubNq][p_cubNq]; // holding scalar

    @shared dfloat s_cubInterpT[p_Nq][p_cubNq];
    @shared dfloat s_cubProjectT[p_cubNq][p_Nq];
    @shared dfloat s_cubDWT[p_cubNq][p_Nq];

    @exclusive dfloat r_Un, r_Vn, r_Sn;
    @exclusive dfloat r_F11, r_F12;

    //fetch the U and V values and store in flux arrays in @shared
    for(int es=0;es<p_NblockV;++es;@inner(2)){   
      for(int j=0;j<p_cubNq;++j;@inner(1)){ 
        for(int i=0;i<p_cubNq;++i;@inner(0)){    
          const dlong e = eo+es; // element in block
          if((e<Nelements) && (i<p_Nq) && (j<p_Nq)){ 
            const dlong id = e*p_Np + j*p_Nq+i;

            const dfloat Un = U[id+0*voffset];
            const dfloat Vn = U[id+1*voffset];
            const dfloat Sn = S[id+0*soffset];

            s_F11[es][j][i] = Un;
            s_F12[es][j][i] = Vn;
            s_F13[es][j][i] = Sn;
          }

          const int id = i+j*p_cubNq;
          if ((es==0) && (id<p_Nq*p_cubNq)) {
            s_cubDWT[0][id] = cubDWT[id];
            s_cubInterpT[0][id] = cubInterpT[id];
            s_cubProjectT[0][id] = cubProjectT[id];
          }
        }
      }
    }

    @barrier("local");

    //interpolate in i, store in register
    for(int es=0;es<p_NblockV;++es;@inner(2)){   
      for(int j=0;j<p_cubNq;++j;@inner(1)){ 
        for(int i=0;i<p_cubNq;++i;@inner(0)){
          if (j<p_Nq) {
            r_Un = 0.; r_Vn = 0.; r_Sn = 0.; 

#pragma unroll p_Nq
            for (int n=0;n<p_Nq;n++) {
              const dfloat Ini = s_cubInterpT[n][i];
              r_Un  += Ini*s_F11[es][j][n];
              r_Vn  += Ini*s_F12[es][j][n];
              r_Sn  += Ini*s_F13[es][j][n];
            }
          }
        }
      }
    }

    @barrier("local");

    //write register back to @shared
    for(int es=0;es<p_NblockV;++es;@inner(2)){   
      for(int j=0;j<p_cubNq;++j;@inner(1)){ 
        for(int i=0;i<p_cubNq;++i;@inner(0)){
          if (j<p_Nq) {
            s_F11[es][j][i] = r_Un;
            s_F12[es][j][i] = r_Vn;
            s_F13[es][j][i] = r_Sn;
          }
        }
      }
    }

    @barrier("local");

    //interpolate in j and store flux in register
    for(int es=0;es<p_NblockV;++es;@inner(2)){   
      for(int j=0;j<p_cubNq;++j;@inner(1)){ 
        for(int i=0;i<p_cubNq;++i;@inner(0)){
          r_Un  = 0.; r_Vn  = 0.; r_Sn = 0.; 

#pragma unroll p_Nq
          for (int n=0;n<p_Nq;n++) {
            const dfloat Inj = s_cubInterpT[n][j];
            r_Un  += Inj*s_F11[es][n][i];
            r_Vn  += Inj*s_F12[es][n][i];
            r_Sn  += Inj*s_F13[es][n][i];
          }
        }
      }
    }

    @barrier("local");

    //construct flux from registers
    for(int es=0;es<p_NblockV;++es;@inner(2)){   
      for(int j=0;j<p_cubNq;++j;@inner(1)){ 
        for(int i=0;i<p_cubNq;++i;@inner(0)){
          const dlong e = eo+es; // element in block
          if(e<Nelements){ 
            const dlong gid = e*p_cubNp*p_Nvgeo+ j*p_cubNq +i;
            const dfloat drdx = cubvgeo[gid + p_RXID*p_cubNp];
            const dfloat drdy = cubvgeo[gid + p_RYID*p_cubNp];
            const dfloat dsdx = cubvgeo[gid + p_SXID*p_cubNp];
            const dfloat dsdy = cubvgeo[gid + p_SYID*p_cubNp];
            const dfloat J = cubvgeo[gid + p_JID*p_cubNp];

            const dfloat cUn = J*(drdx*r_Un+drdy*r_Vn);
            const dfloat cVn = J*(dsdx*r_Un+dsdy*r_Vn);

            s_F11[es][j][i] = cUn*r_Sn;
            s_F12[es][j][i] = cVn*r_Sn;
          }
        }
      }
    }

    @barrier("local");

    //project/differentiate in j
    for(int es=0;es<p_NblockV;++es;@inner(2)){   
      for(int j=0;j<p_cubNq;++j;@inner(1)){ 
        for(int i=0;i<p_cubNq;++i;@inner(0)){
          r_F11  = 0.; r_F12  = 0.;

          if (j<p_Nq) {
#pragma unroll p_cubNq
            for (int n=0;n<p_cubNq;n++) {
              const dfloat Pnj = s_cubProjectT[n][j];
              const dfloat Dnj = s_cubDWT[n][j];
              r_F11  += Pnj*s_F11[es][n][i];
              r_F12  += Dnj*s_F12[es][n][i];
            }
          }
        }
      }
    }

    @barrier("local");

    //write register back to @shared
    for(int es=0;es<p_NblockV;++es;@inner(2)){   
      for(int j=0;j<p_cubNq;++j;@inner(1)){ 
        for(int i=0;i<p_cubNq;++i;@inner(0)){
          if (j<p_Nq) {
            s_F11[es][j][i] = r_F11;
            s_F12[es][j][i] = r_F12;
          }
        }
      }
    }

    @barrier("local");    

    //project/differentiate in i and write back 
    for(int es=0;es<p_NblockV;++es;@inner(2)){ 
      for(int j=0;j<p_cubNq;++j;@inner(1)){ 
        for(int i=0;i<p_cubNq;++i;@inner(0)){  
          const dlong e = eo+es; // element in block
          if((e<Nelements) && (i<p_Nq) && (j<p_Nq)){ 
            const dlong gid = e*p_Np*p_Nvgeo+ j*p_Nq +i;
            const dfloat invJW = vgeo[gid + p_IJWID*p_Np];
            
            dfloat ns = 0.f; 
            
#pragma unroll p_cubNq
      for(int n=0;n<p_cubNq;++n){
        const dfloat Pni = s_cubProjectT[n][i];
        const dfloat Dni = s_cubDWT[n][i];

        ns += Dni*s_F11[es][j][n]
             +Pni*s_F12[es][j][n];

      }
            const dlong id = e*p_Np + j*p_Nq + i;
            NS[id+0*soffset] = -invJW*ns;
          }
        }
      }
    }
  }  
} 



void quadSurfaceTerms(int es, int face, int m, int i, int j,
                      @shared dfloat s_cubProjectT[p_cubNq][p_Nq],
                      @shared dfloat s_fluxNS[p_NblockS][p_Nfaces][p_cubNq],
                      @shared dfloat s_NS[p_NblockS][p_Nq][p_Nq]){
  
  dfloat ns = 0.f; 
#pragma unroll p_cubNq
  for(int n=0;n<p_cubNq;++n){                                         
    const dfloat Pni = s_cubProjectT[n][m];                           
    ns  += Pni*s_fluxNS[es][face][n];                                 
  }                                                                     
  s_NS[es][j][i] += ns;                                                 
}


@kernel void cdsAdvectionCubatureSurfaceQuad2D(const dlong Nelements,
					       @restrict const  dfloat *  vgeo,
					       @restrict const  dfloat *  sgeo,
					       @restrict const  dfloat *  cubsgeo,
					       @restrict const  dfloat *  intInterpT,
					       @restrict const  dfloat *  intLIFTT,
					       @restrict const  dfloat *  cubInterpT,
					       @restrict const  dfloat *  cubProjectT,
					       @restrict const  dlong  *  vmapM,
					       @restrict const  dlong  *  vmapP,
					       @restrict const  int    *  EToB,
					       const dfloat time,
					       @restrict const  dfloat *  intx,
					       @restrict const  dfloat *  inty,
					       @restrict const  dfloat *  intz,
					        const dlong voffset,
                  const dlong soffset,
                  @restrict const  dfloat *  U,
                  @restrict const  dfloat *  S,
                  @restrict dfloat *  NS){
  
  // for all elements
  for(dlong eo=0;eo<Nelements;eo+=p_NblockS;@outer(0)){
    // @shared storage for flux terms
    @shared dfloat s_NS[p_NblockS][p_Nq][p_Nq];
    
    @shared dfloat s_UM[p_NblockS][p_Nfaces][p_cubNq];
    @shared dfloat s_VM[p_NblockS][p_Nfaces][p_cubNq];
    @shared dfloat s_UP[p_NblockS][p_Nfaces][p_cubNq];
    @shared dfloat s_VP[p_NblockS][p_Nfaces][p_cubNq];
    @shared dfloat s_SM[p_NblockS][p_Nfaces][p_cubNq];
    @shared dfloat s_SP[p_NblockS][p_Nfaces][p_cubNq];
    
    // reuse @shared memory buffers
#define s_fluxNS s_SM
    
    @exclusive dfloat r_UMn[p_Nfaces], r_VMn[p_Nfaces];
    @exclusive dfloat r_UPn[p_Nfaces], r_VPn[p_Nfaces];
    @exclusive dfloat r_SMn[p_Nfaces], r_SPn[p_Nfaces];
    
    @shared dfloat s_cubInterpT[p_Nq][p_cubNq];
    @shared dfloat s_cubProjectT[p_cubNq][p_Nq];
    
    // for all face nodes of all elements
    for(int es=0;es<p_NblockS;++es;@inner(1)){
      for(int i=0;i<p_cubNq;++i;@inner(0)){
	const dlong e = eo + es;
	if(e<Nelements && i<p_Nq){
#pragma unroll p_Nfaces
	  for (int face=0;face<p_Nfaces;face++) {
	    const dlong id  = e*p_Nfp*p_Nfaces + face*p_Nq + i;
	    const dlong idM = vmapM[id];
	    const dlong idP = vmapP[id];
	    
	    // load negative and positive trace node values of velocity
	    s_UM[es][face][i] = U[idM+0*voffset];
	    s_UP[es][face][i] = U[idP+0*voffset];
      s_VM[es][face][i] = U[idM+1*voffset];
	    s_VP[es][face][i] = U[idP+1*voffset];
      s_SM[es][face][i] = S[idM+0*soffset];
      s_SP[es][face][i] = S[idP+0*soffset];

	  }
	}
	
	//zero out resulting surface contributions
	if (i<p_Nq) {
#pragma unroll p_Nq
	  for(int j=0;j<p_Nq;++j){
	    s_NS[es][j][i] = 0.;
	  }
	}

	//fetch reference operators
	if (es==0) {
#pragma unroll p_Nq
	  for(int j=0;j<p_Nq;++j){
	    const int id = i+j*p_cubNq;
	    s_cubInterpT[0][id] = cubInterpT[id];
	    s_cubProjectT[0][id] = cubProjectT[id];
	  }
	}
      }
    }

    @barrier("local");

    //interpolate traces, store flux in register
    for(int es=0;es<p_NblockS;++es;@inner(1)){   
      for(int i=0;i<p_cubNq;++i;@inner(0)){
#pragma unroll p_Nfaces 
	for (int face=0;face<p_Nfaces;face++) {
	  r_UMn[face] = 0.; r_VMn[face] = 0.;
    r_UPn[face] = 0.; r_VPn[face] = 0.;
    r_SMn[face] = 0.; r_SPn[face] = 0.;
	}

#pragma unroll p_Nq
	for (int n=0;n<p_Nq;n++) {
	  const dfloat Ini = s_cubInterpT[n][i];

#pragma unroll p_Nfaces
	  for (int face=0;face<p_Nfaces;face++) {
	    r_UMn[face]  += Ini*s_UM[es][face][n];
	    r_VMn[face]  += Ini*s_VM[es][face][n];
      r_UPn[face]  += Ini*s_UP[es][face][n];
      r_VPn[face]  += Ini*s_VP[es][face][n];
      r_SMn[face]  += Ini*s_SM[es][face][n];
      r_SPn[face]  += Ini*s_SP[es][face][n];
	  }
	}
      }
    }

    @barrier("local"); 

    //write fluxes to @shared
    for(int es=0;es<p_NblockS;++es;@inner(1)){   
      for(int i=0;i<p_cubNq;++i;@inner(0)){
	const dlong e = eo + es;
	if(e<Nelements){
#pragma unroll p_Nfaces
	  for (int face=0;face<p_Nfaces;face++) {
      struct bcData bc; 
	    const dlong sk = e*p_cubNq*p_Nfaces + face*p_cubNq + i;
	    const dfloat sJ = cubsgeo[sk*p_Nsgeo+p_SJID];
      bc.time = time; 
	    bc.idM = e*p_Nfaces*p_cubNq + face*p_cubNq + i;
      bc.nx  = cubsgeo[sk*p_Nsgeo+p_NXID];
      bc.ny  = cubsgeo[sk*p_Nsgeo+p_NYID];
      bc.x   = intx[e*p_Nfaces*p_cubNq + face*p_cubNq + i];
      bc.y   = inty[e*p_Nfaces*p_cubNq + face*p_cubNq + i]; 
      // bc.wrk = (dfloat *)W; 
      bc.voffset = voffset;
      bc.soffset = soffset;
      //
      bc.uM = r_UMn[face]; 
      bc.vM = r_VMn[face];
      bc.uP = r_UPn[face];
      bc.vP = r_VPn[face];
      bc.sM = r_SMn[face]; 
      bc.sP = r_SPn[face]; 

      bc.id = EToB[face+p_Nfaces*e];
      if(bc.id>0) {
	      cdsDirichletConditions2D(&bc); 
	    }

	    const dfloat unM   = fabs(bc.nx*bc.uM + bc.ny*bc.vM);
	    const dfloat unP   = fabs(bc.nx*bc.uP + bc.ny*bc.vP);
	    const dfloat unMax = (unM > unP) ? unM : unP;

	    s_fluxNS[es][face][i] = sJ*(.5f*(bc.nx*(bc.sP*bc.uP + bc.sM*bc.uM)
					                           + bc.ny*(bc.sP*bc.vP + bc.sM*bc.vM)  + unMax*(bc.sM-bc.sP) ));
	    
	  }
	}
      }
    }

    @barrier("local");

    // for all face nodes of all elements
    // face 0 & 2
    for(int es=0;es<p_NblockS;++es;@inner(1)){
      for(int i=0;i<p_cubNq;++i;@inner(0)){
	if(i<p_Nq){
	  //          quadSurfaceTerms(0,i,i,0     );
	  quadSurfaceTerms(es, 0, i, i, 0,
			    s_cubProjectT, s_fluxNS, s_NS);

	  //quadSurfaceTerms(2,i,i,p_Nq-1);
	  quadSurfaceTerms(es, 2, i, i, p_Nq-1,
			    s_cubProjectT, s_fluxNS, s_NS);
	}
      }
    }

    @barrier("local");

    // face 1 & 3
    for(int es=0;es<p_NblockS;++es;@inner(1)){
      for(int j=0;j<p_cubNq;++j;@inner(0)){
	if(j<p_Nq){
	  //          quadSurfaceTerms(1,j,p_Nq-1,j);
	  quadSurfaceTerms(es, 1, j, p_Nq-1, j,
			   s_cubProjectT, s_fluxNS, s_NS);

	  //          quadSurfaceTerms(3,j,0     ,j);
	  quadSurfaceTerms(es, 3, j, 0, j,
			    s_cubProjectT, s_fluxNS, s_NS);
	}
      }
    }

    @barrier("local");

    for(int es=0;es<p_NblockS;++es;@inner(1)){
      for(int i=0;i<p_cubNq;++i;@inner(0)){
	const dlong e = eo + es;
	if(e<Nelements && i<p_Nq){
#pragma unroll p_Nq
	  for(int j=0;j<p_Nq;++j){
	    const dlong gid = e*p_Np*p_Nvgeo+ j*p_Nq +i;
	    const dfloat invJW = vgeo[gid + p_IJWID*p_Np];

	    const dlong id = e*p_Np + j*p_Nq + i;

	    NS[id+0*soffset] += invJW*s_NS[es][j][i];
	  }
	}
      }
    }
  }
}




// Compute Divergence in weak Form
@kernel void cdsStrongAdvectionVolumeQuad2D(const dlong Nelements,
              @restrict const  dfloat *  vgeo,
              @restrict const  dfloat *  D,
              const dlong voffset,
              const dlong soffset,
              @restrict const  dfloat *  U,
              @restrict const  dfloat *  S,
              @restrict dfloat *  NS){

  for(dlong eo=0;eo<Nelements;eo+=p_NblockV;@outer(0)){  // for all elements

    //@shared dfloat s_U[p_NblockV][p_Nq][p_Nq];
    //@shared dfloat s_V[p_NblockV][p_Nq][p_Nq];
    @shared dfloat s_S[p_NblockV][p_Nq][p_Nq];

    @shared dfloat s_D[p_Nq][p_Nq];

    for(int es=0;es<p_NblockV;++es;@inner(2)){   
      for(int j=0;j<p_Nq;++j;@inner(1)){ 
  for(int i=0;i<p_Nq;++i;@inner(0)){    
    const dlong e = eo+es; // element in block
    if(e<Nelements){ 
      const dlong id = e*p_Np + j*p_Nq+i;
     // s_U[es][j][i] = U[id+0*voffset];
     // s_V[es][j][i] = U[id+1*voffset];
      s_S[es][j][i] = S[id+0*soffset];
      if (es==0)
        s_D[j][i] = D[j*p_Nq+i];
    }
  }
      }
    }

    @barrier("local");

    for(int es=0;es<p_NblockV;++es;@inner(2)){   
      for(int j=0;j<p_Nq;++j;@inner(1)){ 
  for(int i=0;i<p_Nq;++i;@inner(0)){    
    const dlong e = eo+es; // element in block
    if(e<Nelements){ 
      const dlong gid = e*p_Np*p_Nvgeo+ j*p_Nq +i;

      const dfloat drdx = vgeo[gid + p_RXID*p_Np];
      const dfloat drdy = vgeo[gid + p_RYID*p_Np];
      const dfloat dsdx = vgeo[gid + p_SXID*p_Np];
      const dfloat dsdy = vgeo[gid + p_SYID*p_Np];

      dfloat dSdr = 0.f, dSds = 0.f;

#pragma unroll p_Nq
      for(int n=0;n<p_Nq;++n){
        const dfloat Dr = s_D[i][n];
        const dfloat Ds = s_D[j][n];
        //
        dSdr += Dr*s_S[es][j][n];
        dSds += Ds*s_S[es][n][i];
      }


      dfloat dSdx = drdx*dSdr + dsdx*dSds;
      dfloat dSdy = drdy*dSdr + dsdy*dSds;
   
      const dlong id = e*p_Np + j*p_Nq + i;
      // dfloat u = s_U[es][j][i];
      // dfloat v = s_V[es][j][i];
      const dfloat u = U[id+0*voffset];
      const dfloat v = U[id+1*voffset];

      NS[id+0*soffset] =  (u*dSdx + v*dSdy);
    }
  }
      }
    }
  }
}



@kernel void cdsStrongAdvectionCubatureVolumeQuad2D(const dlong Nelements,
                @restrict const  dfloat *  vgeo,
                @restrict const  dfloat *  cubvgeo,
                @restrict const  dfloat *  cubDT,
                @restrict const  dfloat *  cubInterpT,
                @restrict const  dfloat *  cubProjectT,
                const dlong voffset,
                const dlong soffset,
                @restrict const  dfloat *  U,
                @restrict const  dfloat *  S, //storage for interpolated fields
                @restrict dfloat *  NS){
  for(dlong e=0;e<Nelements;++e;@outer(0)){

    @shared dfloat s_U[p_cubNq][p_cubNq];
    @shared dfloat s_V[p_cubNq][p_cubNq];
    @shared dfloat s_S[p_cubNq][p_cubNq];
    @shared dfloat s_Sr[p_cubNq][p_cubNq];
    @shared dfloat s_NS[p_cubNq][p_cubNq];

    @shared dfloat s_cubInterpT[p_Nq][p_cubNq];
    @shared dfloat s_cubDT[p_Nq][p_cubNq];

    @exclusive dfloat r_U, r_V, r_S, r_Sr, r_Ss;

    //fetch the U and V values and store in flux arrays in @shared
    for(int j=0;j<p_cubNq;++j;@inner(1)){
      for(int i=0;i<p_cubNq;++i;@inner(0)){
        dlong id;
        if((i<p_Nq) && (j<p_Nq)){
          id = e*p_Np + j*p_Nq+i;
          s_U[j][i] = U[id+0*voffset];
          s_V[j][i] = U[id+1*voffset];
          s_S[j][i] = S[id+0*soffset];
        }

        id = i + j*p_cubNq;
        if (id<p_Nq*p_cubNq) {
          s_cubDT[0][id] = cubDT[id];
          s_cubInterpT[0][id] = cubInterpT[id];
        }
      }
    }

    @barrier("local");

    //interpolate in i, store in register
    for(int j=0;j<p_cubNq;++j;@inner(1)){
      for(int i=0;i<p_cubNq;++i;@inner(0)){
        if (j<p_Nq) {
          r_U = 0.; r_V = 0.; r_S = 0; r_Sr = 0; 

#pragma unroll p_Nq
          for (int n=0;n<p_Nq;n++) {
            const dfloat Ini = s_cubInterpT[n][i];
            const dfloat Dni = s_cubDT[n][i];
            dfloat Ujn = s_U[j][n];
            dfloat Vjn = s_V[j][n];
            dfloat Sjn = s_S[j][n];
            r_U  += Ini*Ujn;
            r_V  += Ini*Vjn;
            r_S  += Ini*Sjn;
            r_Sr += Dni*Sjn;
          }
        }
      }
    }

    @barrier("local");

    //write register back to @shared
    for(int j=0;j<p_cubNq;++j;@inner(1)){
      for(int i=0;i<p_cubNq;++i;@inner(0)){
        if (j<p_Nq) {
          s_U[j][i]  = r_U;
          s_V[j][i]  = r_V;
          s_S[j][i]  = r_S;
          s_Sr[j][i] = r_Sr;
        }
      }
    }

    @barrier("local");

    //interpolate in j and store flux in register
    for(int j=0;j<p_cubNq;++j;@inner(1)){
      for(int i=0;i<p_cubNq;++i;@inner(0)){
        r_U  = 0.; r_V  = 0.; r_S = 0; r_Sr = 0;  r_Ss = 0;

#pragma unroll p_Nq
        for (int n=0;n<p_Nq;n++) {
          const dfloat Inj = s_cubInterpT[n][j];
          const dfloat Dnj = s_cubDT[n][j];

          dfloat Uni  = s_U[n][i];
          dfloat Vni  = s_V[n][i];
          dfloat Sni  = s_S[n][i];
          dfloat Srni = s_Sr[n][i];

          r_U  += Inj*Uni;
          r_V  += Inj*Vni;
          r_Sr += Inj*Srni;
          r_Ss += Dnj*Sni;
        }
      }
    }

    @barrier("local");

    //construct flux from registers
    for(int j=0;j<p_cubNq;++j;@inner(1)){
      for(int i=0;i<p_cubNq;++i;@inner(0)){

        const dlong gid = e*p_cubNp*p_Nvgeo+ j*p_cubNq +i;
        const dfloat drdx = cubvgeo[gid + p_RXID*p_cubNp];
        const dfloat drdy = cubvgeo[gid + p_RYID*p_cubNp];
        const dfloat dsdx = cubvgeo[gid + p_SXID*p_cubNp];
        const dfloat dsdy = cubvgeo[gid + p_SYID*p_cubNp];
        const dfloat JW   = cubvgeo[gid + p_JWID*p_cubNp];

        dfloat dSdx = drdx*r_Sr + dsdx*r_Ss;
        dfloat dSdy = drdy*r_Sr + dsdy*r_Ss;

        s_NS[j][i] = JW*(r_U*dSdx + r_V*dSdy);
      }
    }

    @barrier("local");

    //project/differentiate in j
    for(int j=0;j<p_cubNq;++j;@inner(1)){
      for(int i=0;i<p_cubNq;++i;@inner(0)){
        dfloat r_NS  = 0.; 

        if (j<p_Nq) {
#pragma unroll p_cubNq
          for (int n=0;n<p_cubNq;n++) {
            const dfloat Inj = s_cubInterpT[j][n];
            r_NS += Inj*s_NS[n][i];
          }
          s_S[j][i] = r_NS;
        }
      }
    }

    @barrier("local");

    //project/differentiate in i and write back
    for(int j=0;j<p_cubNq;++j;@inner(1)){
      for(int i=0;i<p_cubNq;++i;@inner(0)){
        if((i<p_Nq) && (j<p_Nq)){
          dfloat ns = 0.f; 

#pragma unroll p_cubNq
          for(int n=0;n<p_cubNq;++n){
            const dfloat Ini = s_cubInterpT[i][n];

            ns += Ini*s_S[j][n];
          }
          const dlong gid = e*p_Np*p_Nvgeo+ j*p_Nq +i;
          const dfloat invJW = vgeo[gid + p_IJWID*p_Np];

          const dlong id = e*p_Np + j*p_Nq + i;
    NS[id+0*soffset] = invJW*ns;
        }
      }
    }
  }
}

