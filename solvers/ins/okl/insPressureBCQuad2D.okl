/*

The MIT License (MIT)

Copyright (c) 2017 Tim Warburton, Noel Chalmers, Jesse Chan, Ali Karakus

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*/


#define surfaceTermsIpdg(sk,face,i, j)                                  \
{                                                                       \
  struct bcData bc;  \
    bc.idM = vmapM[sk];         \
    bc.nx = sgeo[sk*p_Nsgeo+p_NXID];        \
    bc.ny = sgeo[sk*p_Nsgeo+p_NYID];        \
    bc.time = time; \
    bc.x   = x[bc.idM]; \
    bc.y   = y[bc.idM]; \
    bc.fieldOffset = offset; \
    const dfloat WsJ = sgeo[sk*p_Nsgeo+p_WSJID];      \
    const dfloat hinv= sgeo[sk*p_Nsgeo+p_IHID];       \
                                                      \
    bc.pxP=0.f; bc.pyP=0.f; bc.pP=0.f;      \
    bc.uM    = U[bc.idM+0*offset];  bc.vM   = U[bc.idM+1*offset]; \
    bc.wrk = (dfloat *) W; \
                    \
    dfloat pP = 0.f, pxP = 0.f, pyP = 0.f; \
    bc.id = EToB[face+p_Nfaces*e];        \
    if(bc.id==3) {                \
      insPressureDirichletConditions2D(&bc); \
      insPressureNeumannConditions2D(&bc); \
      pP = bc.pP; pxP = bc.pxP;  pyP = bc.pyP;   \
      for (int s=0;s<stage;s++) {         \
  dfloat prkBn;           \
  if (ARKswitch) {            \
    prkBn = prkB[stage*(p_Nstages+1)+s];        \
    bc.time = time-(c[stage]-c[s])*dt;        \
  } else {              \
    prkBn = prkB[s];            \
    bc.time = time-(s+1)*dt;          \
  }               \
                  \
  insPressureDirichletConditions2D(&bc); \
  insPressureNeumannConditions2D(&bc); \
                  \
                  \
  pP     -= prkBn*bc.pP;            \
  pxP    -= prkBn*bc.pxP;           \
  pyP    -= prkBn*bc.pyP;           \
      }                 \
    }                 \
                  \
    const dfloat dp = pP;           \
                                                                        \
    s_dpdx[j][i] += WsJ*bc.nx*dp;         \
    s_dpdy[j][i] += WsJ*bc.ny*dp;         \
                                                                        \
    s_rhsp[j][i] -=WsJ*(bc.nx*pxP + bc.ny*pyP + tau*dp*hinv); \
  }

// Actually solves for Pr increamnet not presssure
@kernel void insPressureIpdgBCQuad2D(const dlong Nelements,
             const dlong offset,
            @restrict const  dlong  *  vmapM,
            const dfloat tau,
            const dfloat time,
            const dfloat dt,
            const int stage,
            const int ARKswitch,
            @restrict const  dfloat *  c,
            @restrict const  dfloat *  prkB,
            @restrict const  dfloat *  x,
            @restrict const  dfloat *  y,
            @restrict const  dfloat *  z,
            @restrict const  dfloat *  vgeo,
            @restrict const  dfloat *  sgeo,
            @restrict const  int    *  EToB,
            @restrict const  dfloat *  D,
            @restrict const  dfloat *  LIFTT,
            @restrict const  dfloat *  MM,
            @restrict const  dfloat *  W,
            @restrict const  dfloat *  U,
            @restrict dfloat *  rhsP){
  
  for(dlong e=0;e<Nelements;++e;@outer(0)){

    @shared dfloat s_dpdx[p_Nq][p_Nq];
    @shared dfloat s_dpdy[p_Nq][p_Nq];
    @shared dfloat s_rhsp[p_Nq][p_Nq];
    @shared dfloat s_D[p_Nq][p_Nq];

    // loop over slabs
    for(int j=0;j<p_Nq;++j){
      for(int i=0;i<p_Nq;++i;@inner(0)){
        s_dpdx[j][i] = 0.f;
        s_dpdy[j][i] = 0.f;
        s_rhsp[j][i] = 0.f;

        s_D[j][i] = D[j*p_Nq+i];
      }
    }

    @barrier("local");

    // loop over faces to add pseudo-gradient

    // face 0 & 2
    for(int i=0;i<p_Nq;++i;@inner(0)){
      const dlong sk0 = e*p_Nfp*p_Nfaces + 0*p_Nfp + i ;
      const dlong sk2 = e*p_Nfp*p_Nfaces + 2*p_Nfp + i ;

      surfaceTermsIpdg(sk0,0,i,0);
      surfaceTermsIpdg(sk2,2,i,p_Nq-1);
    }

    @barrier("local");

    // face 1 & 3
    for(int j=0;j<p_Nq;++j;@inner(0)){
      const dlong sk1 = e*p_Nfp*p_Nfaces + 1*p_Nfp + j;
      const dlong sk3 = e*p_Nfp*p_Nfaces + 3*p_Nfp + j;

      surfaceTermsIpdg(sk1,1,p_Nq-1,j);
      surfaceTermsIpdg(sk3,3,0,j);
    }

    @barrier("local");

    // prescale by geofacs
    for(int j=0;j<p_Nq;++j){
      for(int i=0;i<p_Nq;++i;@inner(0)){
        // does need the nasty geofacs
        const dlong gid = i + j*p_Nq + e*p_Np*p_Nvgeo;
        const dfloat drdx = vgeo[gid + p_RXID*p_Np];
        const dfloat drdy = vgeo[gid + p_RYID*p_Np];
        const dfloat dsdx = vgeo[gid + p_SXID*p_Np];
        const dfloat dsdy = vgeo[gid + p_SYID*p_Np];

        // chain rule (need to scale by wei
        const dfloat dpdx = s_dpdx[j][i];
        const dfloat dpdy = s_dpdy[j][i];

        s_dpdx[j][i] = (drdx*dpdx + drdy*dpdy);
        s_dpdy[j][i] = (dsdx*dpdx + dsdy*dpdy);
      }
    }

    @barrier("local");

    // loop over slabs
    for(int j=0;j<p_Nq;++j){
      for(int i=0;i<p_Nq;++i;@inner(0)){
        dfloat dpr = 0, dps = 0;

        for(int n=0;n<p_Nq;++n){
          dpr += s_D[n][i]*s_dpdx[j][n];
          dps += s_D[n][j]*s_dpdy[n][i];
        }

        const dlong id = e*p_Np + j*p_Nq + i;
        rhsP[id] -= s_rhsp[j][i]  + dpr + dps;
      }
    }
  }
}

#define surfaceTerms(sk,face,i, j)                                      \
{                                                                       \
  struct bcData bc;  \
    bc.idM = vmapM[sk];         \
    bc.nx = sgeo[sk*p_Nsgeo+p_NXID];        \
    bc.ny = sgeo[sk*p_Nsgeo+p_NYID];        \
    bc.time = time; \
    bc.x   = x[bc.idM]; \
    bc.y   = y[bc.idM]; \
    bc.fieldOffset = offset; \
    const dfloat WsJ = sgeo[sk*p_Nsgeo+p_WSJID];      \
                                                      \
    bc.pxP=0.f; bc.pyP=0.f; bc.pP=0.f;      \
    bc.uM    = U[bc.idM+0*offset];  bc.vM   = U[bc.idM+1*offset]; \
    bc.wrk = (dfloat *) W; \
                    \
    dfloat pP = 0.f, pxP = 0.f, pyP = 0.f;       \
    bc.id = EToB[face+p_Nfaces*e];        \
    if(bc.id==3) {                \
      insPressureDirichletConditions2D(&bc); \
      insPressureNeumannConditions2D(&bc); \
      pP = bc.pP; pxP = bc.pxP;  pyP = bc.pyP;   \
      for (int s=0;s<stage;s++) {         \
      dfloat prkBn;           \
      if (ARKswitch) {            \
        prkBn = prkB[stage*(p_Nstages+1)+s];        \
        bc.time = time-(c[stage]-c[s])*dt;        \
      } else {              \
        prkBn = prkB[s];            \
        bc.time = time-(s+1)*dt;          \
      }               \
                  \
      insPressureDirichletConditions2D(&bc); \
      insPressureNeumannConditions2D(&bc); \
                  \
                  \
        pP     -= prkBn*bc.pP;           \
        pxP    -= prkBn*bc.pxP;            \
        pyP    -= prkBn*bc.pyP;            \
      }                 \
    }                 \
    s_p  [j][i] = pP;            \
    s_ndp[j][i]-= WsJ*(bc.nx*pxP + bc.ny*pyP);    \
  }

  
//RHS contributions for continuous solver
@kernel void insPressureBCQuad2D(const dlong Nelements,
        const dlong offset,
        @restrict const  dfloat *  ggeo,
        @restrict const  dfloat *  sgeo,
        @restrict const  dfloat *  D,
        @restrict const  dfloat *  S,
        @restrict const  dlong  *  vmapM,
        @restrict const  int  *  EToB,
        @restrict const  dlong  *  sMT,
        const dfloat time,
        const dfloat dt,
        const int stage,
        const int ARKswitch,
        @restrict const  dfloat *  c,
        @restrict const  dfloat *  prkB,
        @restrict const  dfloat *  x,
        @restrict const  dfloat *  y,
        @restrict const  dfloat *  z,
        @restrict const  int    *  mapB,
        @restrict const  dfloat *  W,
        @restrict const  dfloat *  U,
        @restrict dfloat  *  rhsP){
  
  for(dlong e=0;e<Nelements;e++;@outer(0)){
    @shared dfloat s_p[p_Nq][p_Nq];
    @shared dfloat s_ndp[p_Nq][p_Nq];
    @shared dfloat s_D[p_Nq][p_Nq];

    @exclusive dfloat r_pr[p_Nq], r_ps[p_Nq], r_rhsp[p_Nq];
    @exclusive dfloat r_G00[p_Nq], r_G01[p_Nq], r_G11[p_Nq], r_GwJ[p_Nq];

    // loop over slabs
    for(int j=0;j<p_Nq;++j){
      for(int i=0;i<p_Nq;++i;@inner(0)){
        s_p  [j][i] = 0.;
        s_ndp[j][i] = 0.;

        s_D[j][i] = D[j*p_Nq+i];
      }
    }

    @barrier("local");

    // face 0 & 2
    for(int i=0;i<p_Nq;++i;@inner(0)){
      const dlong sk0 = e*p_Nfp*p_Nfaces + 0*p_Nfp + i;
      const dlong sk2 = e*p_Nfp*p_Nfaces + 2*p_Nfp + i;

      surfaceTerms(sk0,0,i,0     );
      surfaceTerms(sk2,2,i,p_Nq-1);
    }
  
    @barrier("local");

    // face 1 & 3
    for(int j=0;j<p_Nq;++j;@inner(0)){
      const dlong sk1 = e*p_Nfp*p_Nfaces + 1*p_Nfp + j;
      const dlong sk3 = e*p_Nfp*p_Nfaces + 3*p_Nfp + j;

      surfaceTerms(sk1,1,p_Nq-1,j);
      surfaceTerms(sk3,3,0     ,j);
    }

    @barrier("local");
    
    // loop over slabs
    for(int j=0;j<p_Nq;++j){
      for(int i=0;i<p_Nq;++i;@inner(0)){
        const dlong base = e*p_Nggeo*p_Np + j*p_Nq + i;

        // assumes w*J built into G entries
        r_GwJ[j] = ggeo[base+p_GWJID*p_Np];
        r_G00[j] = ggeo[base+p_G00ID*p_Np];
        r_G01[j] = ggeo[base+p_G01ID*p_Np];
        r_G11[j] = ggeo[base+p_G11ID*p_Np];

        dfloat pr = 0.f, ps = 0.f;
        
        #pragma unroll p_Nq
          for(int n=0; n<p_Nq; ++n){
            pr += s_D[i][n]*s_p[j][n];
            ps += s_D[j][n]*s_p[n][i];
          }
        
        r_pr[j] = pr; r_ps[j] = ps; 
      }
    }

    // r term ----->
    @barrier("local");

    for(int j=0;j<p_Nq;++j){
      for(int i=0;i<p_Nq;++i;@inner(0)){
        s_p[j][i] = r_G00[j]*r_pr[j] + r_G01[j]*r_ps[j];
      }
    }
      
    @barrier("local");

    for(int j=0;j<p_Nq;++j){
      for(int i=0;i<p_Nq;++i;@inner(0)){
        dfloat tmp = 0.f;
        #pragma unroll p_Nq
          for(int n=0;n<p_Nq;++n) {
            tmp += s_D[n][i]*s_p[j][n];
          }

        r_rhsp[j] = tmp;
      }
    }

    // s term ---->
    @barrier("local");

    for(int j=0;j<p_Nq;++j){
      for(int i=0;i<p_Nq;++i;@inner(0)){
        s_p[j][i] = r_G01[j]*r_pr[j] + r_G11[j]*r_ps[j];
      }
    }
      
    @barrier("local");

    for(int j=0;j<p_Nq;++j){
      for(int i=0;i<p_Nq;++i;@inner(0)){
        dfloat tmp = 0.f;

        #pragma unroll p_Nq 
          for(int n=0;n<p_Nq;++n) {
            tmp += s_D[n][j]*s_p[n][i];
          }
        
        r_rhsp[j] += tmp;

        const dlong id = e*p_Np + j*p_Nq + i;
        rhsP[id] -= r_rhsp[j] + s_ndp[j][i];
      }
    }
  }
}

// need to fix race condition on that also AK....
@kernel void insPressureAddBCQuad2D(const dlong Nelements,
           const dfloat time,
           const dfloat dt,
           const dlong offset,
           const int stage,
           const int ARKswitch,
           @restrict const  dfloat *  c,
           @restrict const  dfloat *  prkB,
           @restrict const  dfloat *  sgeo, 
           @restrict const  dfloat *  x,
           @restrict const  dfloat *  y,
           @restrict const  dfloat *  z,
           @restrict const  dlong  *  vmapM,
           @restrict const  int    *  mapB,
           @restrict const  dfloat *  W,
           @restrict const  dfloat *  U,
           @restrict dfloat *  P){
  
  for(dlong e=0;e<Nelements;e++;@outer(0)){
    for(int n=0;n<p_Nfp*p_Nfaces;++n;@inner(0)){
      struct bcData bc;
      bc.idM  = vmapM[e*p_Nfp*p_Nfaces + n];
      bc.id   = mapB[bc.idM];
      bc.time = time; 

      if(bc.id==3) {
        bc.x  = x[bc.idM]; 
        bc.y  = y[bc.idM]; 
    
        const dlong sid  = e*p_Nfaces*p_Nfp + n;
        bc.nx = sgeo[sid*p_Nsgeo+p_NXID];
        bc.ny = sgeo[sid*p_Nsgeo+p_NYID];
        // Get Current Solution i.e. Un
        bc.uM = U[bc.idM + 0*offset]; 
        bc.vM = U[bc.idM + 1*offset]; 
        // dfloat pP = 0.f;
        bc.pP = P[bc.idM]; bc.wrk = (dfloat *) W; 
        insPressureDirichletConditions2D(&bc);
        dfloat pP = bc.pP; 
        
        for (int s=0;s<stage;s++) {
          dfloat prkBn;
          if (ARKswitch) {
            prkBn = prkB[stage*(p_Nstages+1)+s];
            bc.time = time-(c[stage]-c[s])*dt;
          } else {
            prkBn = prkB[s];
            bc.time = time-(s+1)*dt;
          }
          insPressureDirichletConditions2D(&bc);
          pP    -= prkBn*bc.pP;
        }

        P[bc.idM] = pP;
      }    
    }
  }
}


// We are solving for Pressure Difference
@kernel void insPressureAddBCTOMBOQuad2D(const dlong Nelements,
          const dfloat time,
          const dfloat dt,
          const dlong offset,
          @restrict const  dfloat *  sgeo, 
          @restrict const  dfloat *  x,
          @restrict const  dfloat *  y,
          @restrict const  dfloat *  z,
          @restrict const  dlong  *  vmapM,
          @restrict const  int    *  mapB,
          @restrict const  int    *  EToB,
          @restrict const  dfloat *  W,
          @restrict const  dfloat *  U,
          @restrict dfloat *  P){
  
  for(dlong e=0;e<Nelements;e++;@outer(0)){
    for(int n=0;n<p_Nfp*p_Nfaces;++n;@inner(0)){
      const int f = n/p_Nfp; 
      struct bcData bc;
      const dlong sid  = e*p_Nfaces*p_Nfp + n;
      bc.idM  = vmapM[e*p_Nfp*p_Nfaces + n];
      // bc.id   = EToB[f + p_Nfaces*e]; 
      bc.id   =  mapB[bc.idM];; 
      bc.time = time;
      bc.fieldOffset = offset; 
      //  
      if(bc.id==3) {
        bc.x  = x[bc.idM]; 
        bc.y  = y[bc.idM]; 
        bc.nx = sgeo[sid*p_Nsgeo+p_NXID];
        bc.ny = sgeo[sid*p_Nsgeo+p_NYID];
        // Get Current Solution i.e. Un
        bc.uM = U[bc.idM + 0*offset]; 
        bc.vM = U[bc.idM + 1*offset]; 

        bc.pP  = 0.f; 
        bc.wrk = (dfloat *) W; 
        //
        insPressureDirichletConditions2D(&bc);
        P[bc.idM] = bc.pP;         
      }    
    }
  }
}
